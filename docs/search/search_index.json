{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About the project This project and repository was created to collect templates related with Azure Services .NET SDK integration and commonly used design patterns. Azure SDK Latest Releases In the samples section you will find the links to the source code together with implementation explanation.","title":"Home"},{"location":"#about-the-project","text":"This project and repository was created to collect templates related with Azure Services .NET SDK integration and commonly used design patterns. Azure SDK Latest Releases In the samples section you will find the links to the source code together with implementation explanation.","title":"About the project"},{"location":"about/","text":"About the author Daniel Krzyczkowski Passionate about Microsoft technologies. Awarded with Microsoft Most Valuable Professional title. Main part of his activities is to share knowledge and passion about Microsoft Azure, DevOps, IoT and Universal Windows Platform. Principal Software Engineer @ PredicaGroup.com Pluralsight Author I encourage you to visit my technical blog: Tech Mind Factory","title":"About the author"},{"location":"about/#about-the-author","text":"Daniel Krzyczkowski Passionate about Microsoft technologies. Awarded with Microsoft Most Valuable Professional title. Main part of his activities is to share knowledge and passion about Microsoft Azure, DevOps, IoT and Universal Windows Platform. Principal Software Engineer @ PredicaGroup.com Pluralsight Author I encourage you to visit my technical blog: Tech Mind Factory","title":"About the author"},{"location":"samples/azure-application-insights-sdk-asp-net-core-template/","text":"Azure Application Insights SDK with ASP .NET Core Template Sample project to present how to enable logging with the Azure Application Insights. Packages used: Microsoft.ApplicationInsights.AspNetCore Code sample preview: public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddApplicationInsightsTelemetry(); }","title":"Azure Application Insights SDK with ASP .NET Core"},{"location":"samples/azure-application-insights-sdk-asp-net-core-template/#packages-used","text":"Microsoft.ApplicationInsights.AspNetCore","title":"Packages used:"},{"location":"samples/azure-application-insights-sdk-asp-net-core-template/#code-sample-preview","text":"public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddApplicationInsightsTelemetry(); }","title":"Code sample preview:"},{"location":"samples/azure-blob-storage-sdk-asp-net-core-template/","text":"Azure Storage Blobs SDK with ASP .NET Core Template Sample project to present how to use Azure Storage Blobs SDK to upload and downlad files from the Azure Blob Storage. Packages used: Azure.Storage.Blobs Code sample preview: public class StorageService : IStorageService { private readonly BlobStorageSettings _blobStorageSettings; public StorageService(BlobStorageSettings blobStorageSettings) { _blobStorageSettings = blobStorageSettings; } public async Task DeleteBlobIfExistsAsync(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); await blockBlob.DeleteIfExistsAsync(); } public async Task<bool> DoesBlobExistAsync(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var doesBlobExist = await blockBlob.ExistsAsync(); return doesBlobExist.Value; } public async Task DownloadBlobIfExistsAsync(Stream stream, string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var doesBlobExist = await blockBlob.ExistsAsync(); if (doesBlobExist.Value == true) { await blockBlob.DownloadToAsync(stream); } } public async Task<string> GetBlobUrl(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var exists = await blockBlob.ExistsAsync(); if (exists) { return blockBlob.Uri.ToString(); } else { return string.Empty; } } public async Task UploadBlobAsync(Stream stream, string blobName) { stream.Seek(0, SeekOrigin.Begin); var container = await GetBlobContainer(); BlobClient blob = container.GetBlobClient(blobName); await blob.UploadAsync(stream); } private async Task<BlobContainerClient> GetBlobContainer() { BlobContainerClient container = new BlobContainerClient(_blobStorageSettings.ConnectionString, _blobStorageSettings.ContainerName); await container.CreateIfNotExistsAsync(); return container; } }","title":"Azure Storage Blobs SDK with ASP .NET Core"},{"location":"samples/azure-blob-storage-sdk-asp-net-core-template/#packages-used","text":"Azure.Storage.Blobs","title":"Packages used:"},{"location":"samples/azure-blob-storage-sdk-asp-net-core-template/#code-sample-preview","text":"public class StorageService : IStorageService { private readonly BlobStorageSettings _blobStorageSettings; public StorageService(BlobStorageSettings blobStorageSettings) { _blobStorageSettings = blobStorageSettings; } public async Task DeleteBlobIfExistsAsync(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); await blockBlob.DeleteIfExistsAsync(); } public async Task<bool> DoesBlobExistAsync(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var doesBlobExist = await blockBlob.ExistsAsync(); return doesBlobExist.Value; } public async Task DownloadBlobIfExistsAsync(Stream stream, string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var doesBlobExist = await blockBlob.ExistsAsync(); if (doesBlobExist.Value == true) { await blockBlob.DownloadToAsync(stream); } } public async Task<string> GetBlobUrl(string blobName) { var container = await GetBlobContainer(); var blockBlob = container.GetBlobClient(blobName); var exists = await blockBlob.ExistsAsync(); if (exists) { return blockBlob.Uri.ToString(); } else { return string.Empty; } } public async Task UploadBlobAsync(Stream stream, string blobName) { stream.Seek(0, SeekOrigin.Begin); var container = await GetBlobContainer(); BlobClient blob = container.GetBlobClient(blobName); await blob.UploadAsync(stream); } private async Task<BlobContainerClient> GetBlobContainer() { BlobContainerClient container = new BlobContainerClient(_blobStorageSettings.ConnectionString, _blobStorageSettings.ContainerName); await container.CreateIfNotExistsAsync(); return container; } }","title":"Code sample preview:"},{"location":"samples/azure-cognitive-search-sdk-asp-net-core-template/","text":"Azure Cognitive Search SDK with ASP .NET Core Template To be added soon.","title":"Azure Cognitive Search SDK with ASP .NET Core"},{"location":"samples/azure-core-extensions-asp-net-core-template/","text":"Azure clients integration with ASP .NET Core using Microsoft.Extensions.Azure.Core Library Template Sample project to present how to use Microsoft.Extensions.Azure.Core library to integrate Azure clients with ASP.NET Core dependency injection and configuration systems. Packages used: Microsoft.Extensions.Azure Code sample preview: public static void RegisterDependencies(this IServiceCollection services, IConfiguration configuration) { services.AddSingleton<SimpleTracingPolicy>(); services.AddAzureClients(builder => { TokenCredential credential = new DefaultAzureCredential(); #if DEBUG credential = new ClientSecretCredential(configuration[\"AZURE_TENANT_ID\"], configuration[\"AZURE_CLIENT_ID\"], configuration[\"AZURE_CLIENT_SECRET\"]); #endif builder.AddSecretClient(new Uri(configuration.GetSection(\"KeyVaultSettings:Url\").Value)) .ConfigureOptions(options => options.Retry.MaxRetries = 3) .WithCredential(credential); var secretClient = services.BuildServiceProvider().GetService<SecretClient>(); var secret = secretClient.GetSecret(\"BlobStorageConnectionString\").Value; builder.AddBlobServiceClient(secret.Value) .ConfigureOptions((options, provider) => { options.Retry.MaxRetries = 10; options.Retry.Delay = TimeSpan.FromSeconds(3); options.Diagnostics.IsLoggingEnabled = true; options.AddPolicy(provider.GetService<SimpleTracingPolicy>(), HttpPipelinePosition.PerCall); }); }); }","title":"Azure Clients integration with ASP .NET Core DI"},{"location":"samples/azure-core-extensions-asp-net-core-template/#packages-used","text":"Microsoft.Extensions.Azure","title":"Packages used:"},{"location":"samples/azure-core-extensions-asp-net-core-template/#code-sample-preview","text":"public static void RegisterDependencies(this IServiceCollection services, IConfiguration configuration) { services.AddSingleton<SimpleTracingPolicy>(); services.AddAzureClients(builder => { TokenCredential credential = new DefaultAzureCredential(); #if DEBUG credential = new ClientSecretCredential(configuration[\"AZURE_TENANT_ID\"], configuration[\"AZURE_CLIENT_ID\"], configuration[\"AZURE_CLIENT_SECRET\"]); #endif builder.AddSecretClient(new Uri(configuration.GetSection(\"KeyVaultSettings:Url\").Value)) .ConfigureOptions(options => options.Retry.MaxRetries = 3) .WithCredential(credential); var secretClient = services.BuildServiceProvider().GetService<SecretClient>(); var secret = secretClient.GetSecret(\"BlobStorageConnectionString\").Value; builder.AddBlobServiceClient(secret.Value) .ConfigureOptions((options, provider) => { options.Retry.MaxRetries = 10; options.Retry.Delay = TimeSpan.FromSeconds(3); options.Diagnostics.IsLoggingEnabled = true; options.AddPolicy(provider.GetService<SimpleTracingPolicy>(), HttpPipelinePosition.PerCall); }); }); }","title":"Code sample preview:"},{"location":"samples/azure-cosmos-db-sdk-repository-pattern-asp-net-core-template/","text":"Azure Cosmos DB SDK Repository Pattern with ASP .NET Core Template Sample project to present how to use repository pattern with Azure Cosmos DB. Packages used: Microsoft.Azure.Cosmos Code sample preview: public abstract class CosmosDbRepository<T> : IAsyncRepository<T> where T : BaseEntity { protected Container _container; protected readonly ICosmosDbClientFactory _cosmosDbClientFactory; protected readonly CosmosDbSettings _cosmosDbSettings; public abstract string ContainerName { get; } public CosmosDbRepository(ICosmosDbClientFactory cosmosDbClientFactory, CosmosDbSettings cosmosDbSettings) { _cosmosDbClientFactory = cosmosDbClientFactory; _cosmosDbSettings = cosmosDbSettings; _container = _cosmosDbClientFactory.CosmosClient .GetContainer(_cosmosDbSettings.DatabaseName, ContainerName); } public async Task<T> AddAsync(T entity) { var response = await _container.CreateItemAsync<T>(entity, new PartitionKey(entity.Id.ToString())); return response.Resource; } public async Task DeleteAsync(T entity) { await _container.DeleteItemAsync<T>(entity.Id.ToString(), new PartitionKey(entity.Id.ToString())); } public async Task<T> GetByIdAsync(Guid id) { try { ItemResponse<T> response = await _container.ReadItemAsync<T>(id.ToString(), new PartitionKey(id.ToString())); return response.Resource; } catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound) { return null; } } public async Task<IReadOnlyList<T>> ListAllAsync() { var query = _container.GetItemQueryIterator<T>(new QueryDefinition(\"Select * from c\")); List<T> results = new List<T>(); while (query.HasMoreResults) { var response = await query.ReadNextAsync(); results.AddRange(response.ToList()); } return results; } public async Task UpdateAsync(T entity) { await _container.UpsertItemAsync<T>(entity, new PartitionKey(entity.Id.ToString())); } }","title":"Azure Cosmos DB SDK Repository Pattern with ASP .NET Core"},{"location":"samples/azure-cosmos-db-sdk-repository-pattern-asp-net-core-template/#packages-used","text":"Microsoft.Azure.Cosmos","title":"Packages used:"},{"location":"samples/azure-cosmos-db-sdk-repository-pattern-asp-net-core-template/#code-sample-preview","text":"public abstract class CosmosDbRepository<T> : IAsyncRepository<T> where T : BaseEntity { protected Container _container; protected readonly ICosmosDbClientFactory _cosmosDbClientFactory; protected readonly CosmosDbSettings _cosmosDbSettings; public abstract string ContainerName { get; } public CosmosDbRepository(ICosmosDbClientFactory cosmosDbClientFactory, CosmosDbSettings cosmosDbSettings) { _cosmosDbClientFactory = cosmosDbClientFactory; _cosmosDbSettings = cosmosDbSettings; _container = _cosmosDbClientFactory.CosmosClient .GetContainer(_cosmosDbSettings.DatabaseName, ContainerName); } public async Task<T> AddAsync(T entity) { var response = await _container.CreateItemAsync<T>(entity, new PartitionKey(entity.Id.ToString())); return response.Resource; } public async Task DeleteAsync(T entity) { await _container.DeleteItemAsync<T>(entity.Id.ToString(), new PartitionKey(entity.Id.ToString())); } public async Task<T> GetByIdAsync(Guid id) { try { ItemResponse<T> response = await _container.ReadItemAsync<T>(id.ToString(), new PartitionKey(id.ToString())); return response.Resource; } catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound) { return null; } } public async Task<IReadOnlyList<T>> ListAllAsync() { var query = _container.GetItemQueryIterator<T>(new QueryDefinition(\"Select * from c\")); List<T> results = new List<T>(); while (query.HasMoreResults) { var response = await query.ReadNextAsync(); results.AddRange(response.ToList()); } return results; } public async Task UpdateAsync(T entity) { await _container.UpsertItemAsync<T>(entity, new PartitionKey(entity.Id.ToString())); } }","title":"Code sample preview:"},{"location":"samples/azure-event-hub-sdk-asp-net-core-template/","text":"Azure Event Hub SDK with ASP .NET Core Template Sample project to present how to use Azure Event Hub SDK to send and receive events using Azure Event Hub. Packages used: Azure.Messaging.EventHubs Code sample preview: public class EventsReceiverService : IEventsReceiverService { private readonly EventHubConsumerClient _client; private readonly EventHubSettings _eventHubSettings; public event EventHandler<string> NewEventMessageReceived; public EventsReceiverService(EventHubSettings eventHubSettings) { _eventHubSettings = eventHubSettings; _client = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName, _eventHubSettings.ListenConnectionString, _eventHubSettings.EventHubName); } public async Task ReceiveEventsAsync(CancellationToken cancellationToken) { await foreach (PartitionEvent partitionEvent in _client.ReadEventsAsync(cancellationToken)) { var eventMessage = Encoding.UTF8.GetString(partitionEvent.Data.Body.ToArray()); NewEventMessageReceived?.Invoke(this, eventMessage); }; } } public class EventsSenderService : IEventsSenderService { private readonly EventHubProducerClient _client; private readonly EventHubSettings _eventHubSettings; public EventsSenderService(EventHubSettings eventHubSettings) { _eventHubSettings = eventHubSettings; _client = new EventHubProducerClient(_eventHubSettings.SendConnectionString, _eventHubSettings.EventHubName); } public async Task SendEventAsync(string eventBody) { EventDataBatch eventBatch = await _client.CreateBatchAsync(); eventBatch.TryAdd(new EventData(Encoding.UTF8.GetBytes(eventBody))); await _client.SendAsync(eventBatch); } }","title":"Azure Event Hub SDK with ASP .NET Core"},{"location":"samples/azure-event-hub-sdk-asp-net-core-template/#packages-used","text":"Azure.Messaging.EventHubs","title":"Packages used:"},{"location":"samples/azure-event-hub-sdk-asp-net-core-template/#code-sample-preview","text":"public class EventsReceiverService : IEventsReceiverService { private readonly EventHubConsumerClient _client; private readonly EventHubSettings _eventHubSettings; public event EventHandler<string> NewEventMessageReceived; public EventsReceiverService(EventHubSettings eventHubSettings) { _eventHubSettings = eventHubSettings; _client = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName, _eventHubSettings.ListenConnectionString, _eventHubSettings.EventHubName); } public async Task ReceiveEventsAsync(CancellationToken cancellationToken) { await foreach (PartitionEvent partitionEvent in _client.ReadEventsAsync(cancellationToken)) { var eventMessage = Encoding.UTF8.GetString(partitionEvent.Data.Body.ToArray()); NewEventMessageReceived?.Invoke(this, eventMessage); }; } } public class EventsSenderService : IEventsSenderService { private readonly EventHubProducerClient _client; private readonly EventHubSettings _eventHubSettings; public EventsSenderService(EventHubSettings eventHubSettings) { _eventHubSettings = eventHubSettings; _client = new EventHubProducerClient(_eventHubSettings.SendConnectionString, _eventHubSettings.EventHubName); } public async Task SendEventAsync(string eventBody) { EventDataBatch eventBatch = await _client.CreateBatchAsync(); eventBatch.TryAdd(new EventData(Encoding.UTF8.GetBytes(eventBody))); await _client.SendAsync(eventBatch); } }","title":"Code sample preview:"},{"location":"samples/azure-function-with-dependency-injection-template/","text":"Azure Function With Dependency Injection Template Sample project to present how to use dependency injection in the Azure Functions. Packages used: Microsoft.Azure.Functions.Extensions Microsoft.NET.Sdk.Functions Code sample preview: [assembly: FunctionsStartup(typeof(AzureDeveloperTemplates.FunctionAppWithDependencyInjection.Startup))] namespace AzureDeveloperTemplates.FunctionAppWithDependencyInjection { class Startup : FunctionsStartup { private IConfiguration _configuration; public override void Configure(IFunctionsHostBuilder builder) { ConfigureSettings(builder); builder.Services.AddSingleton<IMailService, MailService>(); } private void ConfigureSettings(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .SetBasePath(Environment.CurrentDirectory) .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); _configuration = config; var mailServiceSettings = new MailServiceSettings() { SMTPFromAddress = _configuration[\"MailService:SMTPFromAddress\"] }; builder.Services.AddSingleton(mailServiceSettings); } } }","title":"Azure Function With Dependency Injection"},{"location":"samples/azure-function-with-dependency-injection-template/#packages-used","text":"Microsoft.Azure.Functions.Extensions Microsoft.NET.Sdk.Functions","title":"Packages used:"},{"location":"samples/azure-function-with-dependency-injection-template/#code-sample-preview","text":"[assembly: FunctionsStartup(typeof(AzureDeveloperTemplates.FunctionAppWithDependencyInjection.Startup))] namespace AzureDeveloperTemplates.FunctionAppWithDependencyInjection { class Startup : FunctionsStartup { private IConfiguration _configuration; public override void Configure(IFunctionsHostBuilder builder) { ConfigureSettings(builder); builder.Services.AddSingleton<IMailService, MailService>(); } private void ConfigureSettings(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .SetBasePath(Environment.CurrentDirectory) .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); _configuration = config; var mailServiceSettings = new MailServiceSettings() { SMTPFromAddress = _configuration[\"MailService:SMTPFromAddress\"] }; builder.Services.AddSingleton(mailServiceSettings); } } }","title":"Code sample preview:"},{"location":"samples/azure-key-vault-sdk-asp-net-core-template/","text":"Azure Key Vault SDK with ASP .NET Core Template Sample project to present how to integrate with the Azure Key Vault to eliminate storing credentials in the code. Packages used: Azure.Identity Azure.Security.KeyVault.Secrets Code sample preview: private static KeyVaultSecretClientClientFactory InitializeSecretClientInstanceAsync(IConfiguration configuration) { string keyVaultUrl = configuration[\"KeyVaultSettings:Url\"]; var secretClient = new SecretClient(new Uri(keyVaultUrl), new DefaultAzureCredential()); var keyVaultSecretClientClientFactory = new KeyVaultSecretClientClientFactory(secretClient); return keyVaultSecretClientClientFactory; } public class SecretManager : ISecretManager { protected readonly IKeyVaultSecretClientClientFactory _keyVaultSecretClientClientFactory; private readonly SecretClient _secretClient; public SecretManager(IKeyVaultSecretClientClientFactory keyVaultSecretClientClientFactory) { _keyVaultSecretClientClientFactory = keyVaultSecretClientClientFactory; _secretClient = _keyVaultSecretClientClientFactory.SecretClient; } public async Task<string> GetSecretAsync(string secretName) { KeyVaultSecret secret = await _secretClient.GetSecretAsync(secretName); if (secret != null) { return secret.Value; } else { return string.Empty; } } public async Task SetSecretAsync(string secretName, string secretValue) { await _secretClient.SetSecretAsync(secretName, secretValue); } public async Task DeleteSecret(string secretName) { DeleteSecretOperation operation = await _secretClient.StartDeleteSecretAsync(secretName); } public async Task UpdateSecret(string secretName, string secretValue) { await SetSecretAsync(secretName, secretValue); } }","title":"Azure Key Vault SDK with ASP .NET Core"},{"location":"samples/azure-key-vault-sdk-asp-net-core-template/#packages-used","text":"Azure.Identity Azure.Security.KeyVault.Secrets","title":"Packages used:"},{"location":"samples/azure-key-vault-sdk-asp-net-core-template/#code-sample-preview","text":"private static KeyVaultSecretClientClientFactory InitializeSecretClientInstanceAsync(IConfiguration configuration) { string keyVaultUrl = configuration[\"KeyVaultSettings:Url\"]; var secretClient = new SecretClient(new Uri(keyVaultUrl), new DefaultAzureCredential()); var keyVaultSecretClientClientFactory = new KeyVaultSecretClientClientFactory(secretClient); return keyVaultSecretClientClientFactory; } public class SecretManager : ISecretManager { protected readonly IKeyVaultSecretClientClientFactory _keyVaultSecretClientClientFactory; private readonly SecretClient _secretClient; public SecretManager(IKeyVaultSecretClientClientFactory keyVaultSecretClientClientFactory) { _keyVaultSecretClientClientFactory = keyVaultSecretClientClientFactory; _secretClient = _keyVaultSecretClientClientFactory.SecretClient; } public async Task<string> GetSecretAsync(string secretName) { KeyVaultSecret secret = await _secretClient.GetSecretAsync(secretName); if (secret != null) { return secret.Value; } else { return string.Empty; } } public async Task SetSecretAsync(string secretName, string secretValue) { await _secretClient.SetSecretAsync(secretName, secretValue); } public async Task DeleteSecret(string secretName) { DeleteSecretOperation operation = await _secretClient.StartDeleteSecretAsync(secretName); } public async Task UpdateSecret(string secretName, string secretValue) { await SetSecretAsync(secretName, secretValue); } }","title":"Code sample preview:"},{"location":"samples/azure-notification-hub-sdk-asp-net-core-template/","text":"Azure Notification Hub SDK with ASP .NET Core Template Sample project to present how to use Azure Notification Hub SDK to send push notifications. Packages used: Microsoft.Azure.NotificationHubs Code sample preview: public class PushNotificationService : IPushNotificationService { private readonly INotificationHubFactory _notificationHubFactory; public PushNotificationService(INotificationHubFactory notificationHubFactory) { _notificationHubFactory = notificationHubFactory; } public async Task<string> CreateRegistrationId(string handle) { var hub = _notificationHubFactory.NotificationHubClient; string newRegistrationId = null; if (handle != null) { var registrations = await hub.GetRegistrationsByChannelAsync(handle, 100); foreach (RegistrationDescription registration in registrations) { if (newRegistrationId == null) { newRegistrationId = registration.RegistrationId; } else { await hub.DeleteRegistrationAsync(registration); } } } if (newRegistrationId == null) { newRegistrationId = await hub.CreateRegistrationIdAsync(); } return newRegistrationId; } public async Task DeleteRegistration(string registrationId) { await _notificationHubFactory.NotificationHubClient.DeleteRegistrationAsync(registrationId); } public async Task RegisterForPushNotifications(string registrationId, DeviceRegistration deviceUpdate) { var hub = _notificationHubFactory.NotificationHubClient; RegistrationDescription registrationDescription = null; switch (deviceUpdate.Platform) { case MobilePlatform.wns: registrationDescription = new WindowsRegistrationDescription(deviceUpdate.Handle); break; case MobilePlatform.apns: registrationDescription = new AppleRegistrationDescription(deviceUpdate.Handle); break; case MobilePlatform.fcm: registrationDescription = new FcmRegistrationDescription(deviceUpdate.Handle); break; default: throw new ArgumentException(\"Please provide correct platform notification service name\"); } registrationDescription.RegistrationId = registrationId; if (deviceUpdate.Tags != null) registrationDescription.Tags = new HashSet<string>(deviceUpdate.Tags); try { await hub.CreateOrUpdateRegistrationAsync(registrationDescription); } catch (MessagingException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during registration in the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); } } public async Task<NotificationOutcome> SendNotification(PushNotification newNotification) { var hub = _notificationHubFactory.NotificationHubClient; try { NotificationOutcome outcome = null; switch (newNotification.MobilePlatform) { case MobilePlatform.wns: var toast = @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">\" + newNotification.Message + \"</text></binding></visual></toast>\"; if (newNotification.Tags == null) outcome = await hub.SendWindowsNativeNotificationAsync(toast); else outcome = await hub.SendWindowsNativeNotificationAsync(toast, newNotification.Tags); break; case MobilePlatform.apns: var alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"\" + newNotification.Message + \"\\\"}}\"; if (newNotification.Tags == null) outcome = await hub.SendAppleNativeNotificationAsync(alert); else outcome = await hub.SendAppleNativeNotificationAsync(alert, newNotification.Tags); break; case MobilePlatform.fcm: var notification = \"{ \\\"data\\\" : {\\\"message\\\":\\\"\" + newNotification.Message + \"\\\"}}\"; if (newNotification.Tags == null) outcome = await hub.SendFcmNativeNotificationAsync(notification); else outcome = await hub.SendFcmNativeNotificationAsync(notification, newNotification.Tags); break; } if (outcome != null) { if (!((outcome.State == NotificationOutcomeState.Abandoned) || (outcome.State == NotificationOutcomeState.Unknown))) { return outcome; } } System.Diagnostics.Debug.WriteLine(\"Notification was not sent due to issue. Please send again.\"); return null; } catch (MessagingException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during sending notification with the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); return null; } catch (ArgumentException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during sending notification with the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); return null; } } }","title":"Azure Notification Hub SDK with ASP .NET Core Template"},{"location":"samples/azure-notification-hub-sdk-asp-net-core-template/#packages-used","text":"Microsoft.Azure.NotificationHubs","title":"Packages used:"},{"location":"samples/azure-notification-hub-sdk-asp-net-core-template/#code-sample-preview","text":"public class PushNotificationService : IPushNotificationService { private readonly INotificationHubFactory _notificationHubFactory; public PushNotificationService(INotificationHubFactory notificationHubFactory) { _notificationHubFactory = notificationHubFactory; } public async Task<string> CreateRegistrationId(string handle) { var hub = _notificationHubFactory.NotificationHubClient; string newRegistrationId = null; if (handle != null) { var registrations = await hub.GetRegistrationsByChannelAsync(handle, 100); foreach (RegistrationDescription registration in registrations) { if (newRegistrationId == null) { newRegistrationId = registration.RegistrationId; } else { await hub.DeleteRegistrationAsync(registration); } } } if (newRegistrationId == null) { newRegistrationId = await hub.CreateRegistrationIdAsync(); } return newRegistrationId; } public async Task DeleteRegistration(string registrationId) { await _notificationHubFactory.NotificationHubClient.DeleteRegistrationAsync(registrationId); } public async Task RegisterForPushNotifications(string registrationId, DeviceRegistration deviceUpdate) { var hub = _notificationHubFactory.NotificationHubClient; RegistrationDescription registrationDescription = null; switch (deviceUpdate.Platform) { case MobilePlatform.wns: registrationDescription = new WindowsRegistrationDescription(deviceUpdate.Handle); break; case MobilePlatform.apns: registrationDescription = new AppleRegistrationDescription(deviceUpdate.Handle); break; case MobilePlatform.fcm: registrationDescription = new FcmRegistrationDescription(deviceUpdate.Handle); break; default: throw new ArgumentException(\"Please provide correct platform notification service name\"); } registrationDescription.RegistrationId = registrationId; if (deviceUpdate.Tags != null) registrationDescription.Tags = new HashSet<string>(deviceUpdate.Tags); try { await hub.CreateOrUpdateRegistrationAsync(registrationDescription); } catch (MessagingException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during registration in the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); } } public async Task<NotificationOutcome> SendNotification(PushNotification newNotification) { var hub = _notificationHubFactory.NotificationHubClient; try { NotificationOutcome outcome = null; switch (newNotification.MobilePlatform) { case MobilePlatform.wns: var toast = @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">\" + newNotification.Message + \"</text></binding></visual></toast>\"; if (newNotification.Tags == null) outcome = await hub.SendWindowsNativeNotificationAsync(toast); else outcome = await hub.SendWindowsNativeNotificationAsync(toast, newNotification.Tags); break; case MobilePlatform.apns: var alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"\" + newNotification.Message + \"\\\"}}\"; if (newNotification.Tags == null) outcome = await hub.SendAppleNativeNotificationAsync(alert); else outcome = await hub.SendAppleNativeNotificationAsync(alert, newNotification.Tags); break; case MobilePlatform.fcm: var notification = \"{ \\\"data\\\" : {\\\"message\\\":\\\"\" + newNotification.Message + \"\\\"}}\"; if (newNotification.Tags == null) outcome = await hub.SendFcmNativeNotificationAsync(notification); else outcome = await hub.SendFcmNativeNotificationAsync(notification, newNotification.Tags); break; } if (outcome != null) { if (!((outcome.State == NotificationOutcomeState.Abandoned) || (outcome.State == NotificationOutcomeState.Unknown))) { return outcome; } } System.Diagnostics.Debug.WriteLine(\"Notification was not sent due to issue. Please send again.\"); return null; } catch (MessagingException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during sending notification with the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); return null; } catch (ArgumentException exception) { System.Diagnostics.Debug.WriteLine(\"Unhandled exception was thrown during sending notification with the Azure Notification Hub:\"); System.Diagnostics.Debug.WriteLine(exception.Message); System.Diagnostics.Debug.WriteLine(exception.StackTrace); return null; } } }","title":"Code sample preview:"},{"location":"samples/azure-queue-storage-sdk-asp-net-core-template/","text":"Azure Storage Queues SDK with ASP .NET Core Template Sample project to present how to use Azure Storage Queues SDK to send and receive queue messages using Azure Storage Queues. Packages used: Azure.Storage.Queues Code sample preview: public class QueueMessagesReceiverService : IQueueMessagesReceiverService { public event EventHandler<string> NewQueueMessageReceived; private readonly QueueClient _client; private readonly QueueStorageSettings _queueStorageSettings; public QueueMessagesReceiverService(QueueStorageSettings queueStorageSettings) { _queueStorageSettings = queueStorageSettings; _client = new QueueClient(_queueStorageSettings.ConnectionString, _queueStorageSettings.QueueName); } public async Task ReceiveQueueMessagesAsync(CancellationToken cancellationToken) { var queueMessages = await _client.ReceiveMessagesAsync(cancellationToken); foreach (QueueMessage message in queueMessages.Value) { NewQueueMessageReceived?.Invoke(this, message.MessageText); _client.DeleteMessage(message.MessageId, message.PopReceipt); } } } public class QueueMessagesSenderService : IQueueMessagesSenderService { private readonly QueueClient _client; private readonly QueueStorageSettings _queueStorageSettings; public QueueMessagesSenderService(QueueStorageSettings queueStorageSettings) { _queueStorageSettings = queueStorageSettings; _client = new QueueClient(_queueStorageSettings.ConnectionString, _queueStorageSettings.QueueName); } public async Task SendEventAsync(string queueMessageBody) { await _client.CreateIfNotExistsAsync(); await _client.SendMessageAsync(queueMessageBody); } }","title":"Azure Storage Queues SDK with ASP .NET Core"},{"location":"samples/azure-queue-storage-sdk-asp-net-core-template/#packages-used","text":"Azure.Storage.Queues","title":"Packages used:"},{"location":"samples/azure-queue-storage-sdk-asp-net-core-template/#code-sample-preview","text":"public class QueueMessagesReceiverService : IQueueMessagesReceiverService { public event EventHandler<string> NewQueueMessageReceived; private readonly QueueClient _client; private readonly QueueStorageSettings _queueStorageSettings; public QueueMessagesReceiverService(QueueStorageSettings queueStorageSettings) { _queueStorageSettings = queueStorageSettings; _client = new QueueClient(_queueStorageSettings.ConnectionString, _queueStorageSettings.QueueName); } public async Task ReceiveQueueMessagesAsync(CancellationToken cancellationToken) { var queueMessages = await _client.ReceiveMessagesAsync(cancellationToken); foreach (QueueMessage message in queueMessages.Value) { NewQueueMessageReceived?.Invoke(this, message.MessageText); _client.DeleteMessage(message.MessageId, message.PopReceipt); } } } public class QueueMessagesSenderService : IQueueMessagesSenderService { private readonly QueueClient _client; private readonly QueueStorageSettings _queueStorageSettings; public QueueMessagesSenderService(QueueStorageSettings queueStorageSettings) { _queueStorageSettings = queueStorageSettings; _client = new QueueClient(_queueStorageSettings.ConnectionString, _queueStorageSettings.QueueName); } public async Task SendEventAsync(string queueMessageBody) { await _client.CreateIfNotExistsAsync(); await _client.SendMessageAsync(queueMessageBody); } }","title":"Code sample preview:"},{"location":"samples/azure-service-bus-sdk-asp-net-core-template/","text":"Azure Service Bus SDK with ASP .NET Core Template Sample project to present how to use Azure Service Bus SDK to send and receive messages. Many thanks to @HaraczPawel who helped create this sample basing on the sample from his original repository ! Packages used: Microsoft.Azure.ServiceBus Code sample preview: public class MessagesReceiverService : IMessagesReceiverService { private readonly ServiceBusSettings _serviceBusSettings; private readonly IMessageReceiver _messageReceiver; public MessagesReceiverService(ServiceBusSettings serviceBusSettings) { _serviceBusSettings = serviceBusSettings; var connectionString = new ServiceBusConnectionStringBuilder(_serviceBusSettings.ConnectionString); _messageReceiver = new MessageReceiver(connectionString.GetNamespaceConnectionString(), EntityNameHelper.FormatSubscriptionPath(_serviceBusSettings.TopicName, _serviceBusSettings.Subscription), ReceiveMode.ReceiveAndDelete, RetryPolicy.Default); } public Task<Message> ReceiveMessageAsync() => _messageReceiver.ReceiveAsync(); public Task<Message> ReceiveMessageAsync(TimeSpan operationTimeout) => _messageReceiver.ReceiveAsync(operationTimeout); public Task<IList<Message>> ReceiveMessageAsync(int maxMessageCount) => _messageReceiver.ReceiveAsync(maxMessageCount); public Task<IList<Message>> ReceiveMessageAsync(int maxMessageCount, TimeSpan operationTimeout) => _messageReceiver.ReceiveAsync(maxMessageCount, operationTimeout); } public class MessagesSenderService : IMessagesSenderService { private readonly ITopicClient _client; private readonly ServiceBusSettings _serviceBusSettings; public MessagesSenderService(ServiceBusSettings serviceBusSettings) { _serviceBusSettings = serviceBusSettings; var token = TokenProvider.CreateSharedAccessSignatureTokenProvider(_serviceBusSettings.SharedAccessName, _serviceBusSettings.SharedAccessKey, TokenScope.Entity); _client = new TopicClient(_serviceBusSettings.ServiceBusNamespace, _serviceBusSettings.TopicName, token); } public async Task<string> SendMessageAsync(string messageBody) { var correlationId = Guid.NewGuid().ToString(\"N\"); var messageToSend = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(messageBody)); var message = new Message(messageToSend) { ContentType = $\"{System.Net.Mime.MediaTypeNames.Application.Json};charset=utf-8\", CorrelationId = correlationId }; await _client.SendAsync(message); return correlationId; } }","title":"Azure Service Bus SDK with ASP .NET Core"},{"location":"samples/azure-service-bus-sdk-asp-net-core-template/#packages-used","text":"Microsoft.Azure.ServiceBus","title":"Packages used:"},{"location":"samples/azure-service-bus-sdk-asp-net-core-template/#code-sample-preview","text":"public class MessagesReceiverService : IMessagesReceiverService { private readonly ServiceBusSettings _serviceBusSettings; private readonly IMessageReceiver _messageReceiver; public MessagesReceiverService(ServiceBusSettings serviceBusSettings) { _serviceBusSettings = serviceBusSettings; var connectionString = new ServiceBusConnectionStringBuilder(_serviceBusSettings.ConnectionString); _messageReceiver = new MessageReceiver(connectionString.GetNamespaceConnectionString(), EntityNameHelper.FormatSubscriptionPath(_serviceBusSettings.TopicName, _serviceBusSettings.Subscription), ReceiveMode.ReceiveAndDelete, RetryPolicy.Default); } public Task<Message> ReceiveMessageAsync() => _messageReceiver.ReceiveAsync(); public Task<Message> ReceiveMessageAsync(TimeSpan operationTimeout) => _messageReceiver.ReceiveAsync(operationTimeout); public Task<IList<Message>> ReceiveMessageAsync(int maxMessageCount) => _messageReceiver.ReceiveAsync(maxMessageCount); public Task<IList<Message>> ReceiveMessageAsync(int maxMessageCount, TimeSpan operationTimeout) => _messageReceiver.ReceiveAsync(maxMessageCount, operationTimeout); } public class MessagesSenderService : IMessagesSenderService { private readonly ITopicClient _client; private readonly ServiceBusSettings _serviceBusSettings; public MessagesSenderService(ServiceBusSettings serviceBusSettings) { _serviceBusSettings = serviceBusSettings; var token = TokenProvider.CreateSharedAccessSignatureTokenProvider(_serviceBusSettings.SharedAccessName, _serviceBusSettings.SharedAccessKey, TokenScope.Entity); _client = new TopicClient(_serviceBusSettings.ServiceBusNamespace, _serviceBusSettings.TopicName, token); } public async Task<string> SendMessageAsync(string messageBody) { var correlationId = Guid.NewGuid().ToString(\"N\"); var messageToSend = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(messageBody)); var message = new Message(messageToSend) { ContentType = $\"{System.Net.Mime.MediaTypeNames.Application.Json};charset=utf-8\", CorrelationId = correlationId }; await _client.SendAsync(message); return correlationId; } }","title":"Code sample preview:"},{"location":"samples/azure-signalr-service-sdk-asp-net-core-template/","text":"Azure SignalR Service SDK with ASP .NET Core Template Sample project to present how to use SignalR Service to send real time messages. Packages used: Microsoft.Azure.SignalR Code sample preview: [Authorize] public class SampleHub : Hub { [HubMethodName(\"SendDirectMessageToUser\")] public async Task SendDirectMessageToUser(string sampleMessageAsJson) { var sampleMessage = JsonConvert.DeserializeObject<SampleMessage>(sampleMessageAsJson); sampleMessage.SenderId = new Guid(Context.User.FindFirst(ClaimTypes.NameIdentifier).Value); var messageAsJson = JsonConvert.SerializeObject(sampleMessage); await Clients.User(sampleMessage.ReceiverId.ToString()).SendAsync(messageAsJson); } }","title":"Azure SignalR Service SDK with ASP .NET Core"},{"location":"samples/azure-signalr-service-sdk-asp-net-core-template/#packages-used","text":"Microsoft.Azure.SignalR","title":"Packages used:"},{"location":"samples/azure-signalr-service-sdk-asp-net-core-template/#code-sample-preview","text":"[Authorize] public class SampleHub : Hub { [HubMethodName(\"SendDirectMessageToUser\")] public async Task SendDirectMessageToUser(string sampleMessageAsJson) { var sampleMessage = JsonConvert.DeserializeObject<SampleMessage>(sampleMessageAsJson); sampleMessage.SenderId = new Guid(Context.User.FindFirst(ClaimTypes.NameIdentifier).Value); var messageAsJson = JsonConvert.SerializeObject(sampleMessage); await Clients.User(sampleMessage.ReceiverId.ToString()).SendAsync(messageAsJson); } }","title":"Code sample preview:"},{"location":"samples/azure-sql-db-repository-pattern-asp-net-core-template/","text":"Azure SQL DB Repository Pattern with Entity Framework Core and ASP .NET Core Template Sample project to present how to use repository pattern with Azure SQL DB. Packages used: Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools Code sample preview: public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<SampleEntity> SampleEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity<SampleEntity>().HasData(new SampleEntity { Id = Guid.NewGuid() }); } } ```","title":"Azure SQL DB Repository Pattern with Entity Framework Core and ASP .NET Core"},{"location":"samples/azure-sql-db-repository-pattern-asp-net-core-template/#packages-used","text":"Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools","title":"Packages used:"},{"location":"samples/azure-sql-db-repository-pattern-asp-net-core-template/#code-sample-preview","text":"public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<SampleEntity> SampleEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity<SampleEntity>().HasData(new SampleEntity { Id = Guid.NewGuid() }); } } ```","title":"Code sample preview:"}]}